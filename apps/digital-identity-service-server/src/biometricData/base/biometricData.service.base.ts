/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, BiometricData as PrismaBiometricData } from "@prisma/client";

export class BiometricDataServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BiometricDataCountArgs, "select">
  ): Promise<number> {
    return this.prisma.biometricData.count(args);
  }

  async biometricDataItems(
    args: Prisma.BiometricDataFindManyArgs
  ): Promise<PrismaBiometricData[]> {
    return this.prisma.biometricData.findMany(args);
  }
  async biometricData(
    args: Prisma.BiometricDataFindUniqueArgs
  ): Promise<PrismaBiometricData | null> {
    return this.prisma.biometricData.findUnique(args);
  }
  async createBiometricData(
    args: Prisma.BiometricDataCreateArgs
  ): Promise<PrismaBiometricData> {
    return this.prisma.biometricData.create(args);
  }
  async updateBiometricData(
    args: Prisma.BiometricDataUpdateArgs
  ): Promise<PrismaBiometricData> {
    return this.prisma.biometricData.update(args);
  }
  async deleteBiometricData(
    args: Prisma.BiometricDataDeleteArgs
  ): Promise<PrismaBiometricData> {
    return this.prisma.biometricData.delete(args);
  }
}
