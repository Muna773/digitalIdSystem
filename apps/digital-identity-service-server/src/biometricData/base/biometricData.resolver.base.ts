/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { BiometricData } from "./BiometricData";
import { BiometricDataCountArgs } from "./BiometricDataCountArgs";
import { BiometricDataFindManyArgs } from "./BiometricDataFindManyArgs";
import { BiometricDataFindUniqueArgs } from "./BiometricDataFindUniqueArgs";
import { CreateBiometricDataArgs } from "./CreateBiometricDataArgs";
import { UpdateBiometricDataArgs } from "./UpdateBiometricDataArgs";
import { DeleteBiometricDataArgs } from "./DeleteBiometricDataArgs";
import { BiometricDataService } from "../biometricData.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => BiometricData)
export class BiometricDataResolverBase {
  constructor(
    protected readonly service: BiometricDataService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "BiometricData",
    action: "read",
    possession: "any",
  })
  async _biometricDataItemsMeta(
    @graphql.Args() args: BiometricDataCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [BiometricData])
  @nestAccessControl.UseRoles({
    resource: "BiometricData",
    action: "read",
    possession: "any",
  })
  async biometricDataItems(
    @graphql.Args() args: BiometricDataFindManyArgs
  ): Promise<BiometricData[]> {
    return this.service.biometricDataItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => BiometricData, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "BiometricData",
    action: "read",
    possession: "own",
  })
  async biometricData(
    @graphql.Args() args: BiometricDataFindUniqueArgs
  ): Promise<BiometricData | null> {
    const result = await this.service.biometricData(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BiometricData)
  @nestAccessControl.UseRoles({
    resource: "BiometricData",
    action: "create",
    possession: "any",
  })
  async createBiometricData(
    @graphql.Args() args: CreateBiometricDataArgs
  ): Promise<BiometricData> {
    return await this.service.createBiometricData({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BiometricData)
  @nestAccessControl.UseRoles({
    resource: "BiometricData",
    action: "update",
    possession: "any",
  })
  async updateBiometricData(
    @graphql.Args() args: UpdateBiometricDataArgs
  ): Promise<BiometricData | null> {
    try {
      return await this.service.updateBiometricData({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BiometricData)
  @nestAccessControl.UseRoles({
    resource: "BiometricData",
    action: "delete",
    possession: "any",
  })
  async deleteBiometricData(
    @graphql.Args() args: DeleteBiometricDataArgs
  ): Promise<BiometricData | null> {
    try {
      return await this.service.deleteBiometricData(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
