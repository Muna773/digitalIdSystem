/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AuthenticationLog } from "./AuthenticationLog";
import { AuthenticationLogCountArgs } from "./AuthenticationLogCountArgs";
import { AuthenticationLogFindManyArgs } from "./AuthenticationLogFindManyArgs";
import { AuthenticationLogFindUniqueArgs } from "./AuthenticationLogFindUniqueArgs";
import { CreateAuthenticationLogArgs } from "./CreateAuthenticationLogArgs";
import { UpdateAuthenticationLogArgs } from "./UpdateAuthenticationLogArgs";
import { DeleteAuthenticationLogArgs } from "./DeleteAuthenticationLogArgs";
import { AuthenticationLogService } from "../authenticationLog.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AuthenticationLog)
export class AuthenticationLogResolverBase {
  constructor(
    protected readonly service: AuthenticationLogService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AuthenticationLog",
    action: "read",
    possession: "any",
  })
  async _authenticationLogsMeta(
    @graphql.Args() args: AuthenticationLogCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AuthenticationLog])
  @nestAccessControl.UseRoles({
    resource: "AuthenticationLog",
    action: "read",
    possession: "any",
  })
  async authenticationLogs(
    @graphql.Args() args: AuthenticationLogFindManyArgs
  ): Promise<AuthenticationLog[]> {
    return this.service.authenticationLogs(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AuthenticationLog, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AuthenticationLog",
    action: "read",
    possession: "own",
  })
  async authenticationLog(
    @graphql.Args() args: AuthenticationLogFindUniqueArgs
  ): Promise<AuthenticationLog | null> {
    const result = await this.service.authenticationLog(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AuthenticationLog)
  @nestAccessControl.UseRoles({
    resource: "AuthenticationLog",
    action: "create",
    possession: "any",
  })
  async createAuthenticationLog(
    @graphql.Args() args: CreateAuthenticationLogArgs
  ): Promise<AuthenticationLog> {
    return await this.service.createAuthenticationLog({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AuthenticationLog)
  @nestAccessControl.UseRoles({
    resource: "AuthenticationLog",
    action: "update",
    possession: "any",
  })
  async updateAuthenticationLog(
    @graphql.Args() args: UpdateAuthenticationLogArgs
  ): Promise<AuthenticationLog | null> {
    try {
      return await this.service.updateAuthenticationLog({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AuthenticationLog)
  @nestAccessControl.UseRoles({
    resource: "AuthenticationLog",
    action: "delete",
    possession: "any",
  })
  async deleteAuthenticationLog(
    @graphql.Args() args: DeleteAuthenticationLogArgs
  ): Promise<AuthenticationLog | null> {
    try {
      return await this.service.deleteAuthenticationLog(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
