/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Citizen } from "./Citizen";
import { CitizenCountArgs } from "./CitizenCountArgs";
import { CitizenFindManyArgs } from "./CitizenFindManyArgs";
import { CitizenFindUniqueArgs } from "./CitizenFindUniqueArgs";
import { CreateCitizenArgs } from "./CreateCitizenArgs";
import { UpdateCitizenArgs } from "./UpdateCitizenArgs";
import { DeleteCitizenArgs } from "./DeleteCitizenArgs";
import { CitizenService } from "../citizen.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Citizen)
export class CitizenResolverBase {
  constructor(
    protected readonly service: CitizenService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Citizen",
    action: "read",
    possession: "any",
  })
  async _citizensMeta(
    @graphql.Args() args: CitizenCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Citizen])
  @nestAccessControl.UseRoles({
    resource: "Citizen",
    action: "read",
    possession: "any",
  })
  async citizens(
    @graphql.Args() args: CitizenFindManyArgs
  ): Promise<Citizen[]> {
    return this.service.citizens(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Citizen, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Citizen",
    action: "read",
    possession: "own",
  })
  async citizen(
    @graphql.Args() args: CitizenFindUniqueArgs
  ): Promise<Citizen | null> {
    const result = await this.service.citizen(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Citizen)
  @nestAccessControl.UseRoles({
    resource: "Citizen",
    action: "create",
    possession: "any",
  })
  async createCitizen(
    @graphql.Args() args: CreateCitizenArgs
  ): Promise<Citizen> {
    return await this.service.createCitizen({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Citizen)
  @nestAccessControl.UseRoles({
    resource: "Citizen",
    action: "update",
    possession: "any",
  })
  async updateCitizen(
    @graphql.Args() args: UpdateCitizenArgs
  ): Promise<Citizen | null> {
    try {
      return await this.service.updateCitizen({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Citizen)
  @nestAccessControl.UseRoles({
    resource: "Citizen",
    action: "delete",
    possession: "any",
  })
  async deleteCitizen(
    @graphql.Args() args: DeleteCitizenArgs
  ): Promise<Citizen | null> {
    try {
      return await this.service.deleteCitizen(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
